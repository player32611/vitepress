import{_ as a,c as t,o as i,ag as e}from"./chunks/framework.DD3FK0LQ.js";const g=JSON.parse('{"title":"DOM","description":"","frontmatter":{},"headers":[],"relativePath":"pages/front-end/dom.md","filePath":"pages/front-end/dom.md"}'),n={name:"pages/front-end/dom.md"};function l(p,s,h,o,r,d){return i(),t("div",null,s[0]||(s[0]=[e(`<h1 id="dom" tabindex="-1">DOM <a class="header-anchor" href="#dom" aria-label="Permalink to &quot;DOM&quot;">​</a></h1><div class="danger custom-block"><p class="custom-block-title">警告</p><p>该页面尚未完工!</p></div><h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h2><nav class="table-of-contents"><ul><li><a href="#目录">目录</a></li><li><a href="#dom-简介">DOM 简介</a></li><li><a href="#dom-文档">DOM 文档</a><ul><li><a href="#查找-html-元素">查找 HTML 元素</a></li><li><a href="#改变-html-元素">改变 HTML 元素</a></li><li><a href="#添加和删除元素">添加和删除元素</a></li></ul></li><li><a href="#dom-事件监听程序">DOM 事件监听程序</a></li><li><a href="#dom-集合">DOM 集合</a></li></ul></nav><h2 id="dom-简介" tabindex="-1">DOM 简介 <a class="header-anchor" href="#dom-简介" aria-label="Permalink to &quot;DOM 简介&quot;">​</a></h2><p>DOM 的全称是 Document Object Model ，即文档对象模型，是一套对文档的内容进行抽象和概念化的方法，它是针对 HTML 和 XML 文档的一个 API （应用程序编程接口）描绘了一个层次化的节点树，允许开发人员添加，移除和修改页面的某一部分。</p><h2 id="dom-文档" tabindex="-1">DOM 文档 <a class="header-anchor" href="#dom-文档" aria-label="Permalink to &quot;DOM 文档&quot;">​</a></h2><h3 id="查找-html-元素" tabindex="-1">查找 HTML 元素 <a class="header-anchor" href="#查找-html-元素" aria-label="Permalink to &quot;查找 HTML 元素&quot;">​</a></h3><p><strong>document.getElementById(id)</strong> : 通过元素 id 来查找元素</p><p><strong>document.getElementsByTagName(name)</strong> : 通过标签名来查找元素</p><p><strong>document.getElementsByClassName(name)</strong> : 通过类名来查找元素</p><p><strong>document.querySelector()、document.querySelectorAll()</strong> : 通过CSS选择器字符串来查找元素</p><h3 id="改变-html-元素" tabindex="-1">改变 HTML 元素 <a class="header-anchor" href="#改变-html-元素" aria-label="Permalink to &quot;改变 HTML 元素&quot;">​</a></h3><p><strong>element.innerHTML = new html content</strong> : 改变元素的 inner HTML</p><p><strong>element.attribute = new value</strong> : 改变 HTML 元素的属性值</p><p><strong>element.setAttribute(attribute, value)</strong> : 改变 HTML 元素的属性值</p><p><strong>element.style.property = new style</strong> : 改变 HTML 元素的样式</p><h3 id="添加和删除元素" tabindex="-1">添加和删除元素 <a class="header-anchor" href="#添加和删除元素" aria-label="Permalink to &quot;添加和删除元素&quot;">​</a></h3><p><strong>document.createElement(element)</strong> : 创建 HTML 元素</p><p><strong>document.removeChild(element)</strong> : 删除 HTML 元素</p><p><strong>document.appendChild(element)</strong> : 添加 HTML 元素</p><p><strong>document.replaceChild(element)</strong> : 替换 HTML 元素</p><p><strong>document.write(text)</strong> : 写入 HTML 输出流</p><h2 id="dom-事件监听程序" tabindex="-1">DOM 事件监听程序 <a class="header-anchor" href="#dom-事件监听程序" aria-label="Permalink to &quot;DOM 事件监听程序&quot;">​</a></h2><p><strong>addEventListener()</strong> 方法为指定元素指定事件处理程序，不会覆盖已有的事件处理程序。</p><p><strong>语法</strong></p><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useCapture</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>第一个参数是事件的类型（比如 &quot;click&quot; 或 &quot;mousedown&quot;）。</p><p>第二个参数是当事件发生时我们需要调用的函数。</p><p>第三个参数是布尔值，指定使用事件冒泡还是事件捕获。此参数是可选的。</p><p>通过使用 <strong>removeEventListener()</strong> 方法轻松地删除事件监听器。</p><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mousemove&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, myFunction);</span></span></code></pre></div><h2 id="dom-集合" tabindex="-1">DOM 集合 <a class="header-anchor" href="#dom-集合" aria-label="Permalink to &quot;DOM 集合&quot;">​</a></h2><p>getElementsByTagName() 方法返回 HTMLCollection 对象，是类数组的 HTML 元素列表（集合）。</p><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementsByTagName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;p&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><strong>length</strong> 属性定义了 HTMLCollection 中元素的数量</p><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myCollection </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementsByTagName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;p&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;demo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).innerHTML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myCollection.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><strong>HTMLCollection 并非数组！</strong></p><p>HTMLCollection 也许看起来像数组，但并非数组。</p><p>您能够遍历列表并通过数字引用元素（就像数组那样）。</p><p>不过，您无法对 HTMLCollection 使用数组方法，比如 valueOf()、pop()、push() 或 join()。</p>`,41)]))}const c=a(n,[["render",l]]);export{g as __pageData,c as default};
