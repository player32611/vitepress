import{_ as e,c as r,o as l,ag as i}from"./chunks/framework.DD3FK0LQ.js";const y=JSON.parse('{"title":"常用函数","description":"","frontmatter":{},"headers":[],"relativePath":"pages/gms2/common-functions.md","filePath":"pages/gms2/common-functions.md"}'),o={name:"pages/gms2/common-functions.md"};function n(t,a,d,c,h,s){return l(),r("div",null,a[0]||(a[0]=[i(`<h1 id="常用函数" tabindex="-1">常用函数 <a class="header-anchor" href="#常用函数" aria-label="Permalink to &quot;常用函数&quot;">​</a></h1><div class="danger custom-block"><p class="custom-block-title">警告</p><p>该页面尚未完工!</p></div><h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h2><nav class="table-of-contents"><ul><li><a href="#目录">目录</a></li><li><a href="#数组">数组</a><ul><li><a href="#array-equals-var1-var2">array_equals(var1, var2)</a></li><li><a href="#array-resize-array-index-new-size">array_resize(array_index, new_size)</a></li><li><a href="#array-copy-dest-dest-index-src-src-index-length">array_copy(dest, dest_index, src, src_index, length)</a></li><li><a href="#array-pop-array">array_pop(array)</a></li><li><a href="#array-delete-variable-index-number">array_delete(variable, index, number)</a></li><li><a href="#array-set-variable-index-value">array_set(variable, index, value)</a></li><li><a href="#array-get-variable-index">array_get(variable, index)</a></li><li><a href="#array-insert-variable-index-value-value-value-etc">array_insert(variable, index, value, [value], [value], [etc...])</a></li><li><a href="#array-sort-variable-sorttype-or-function">array_sort(variable, sorttype_or_function)</a></li><li><a href="#array-create-size-value">array_create(size, [value])</a></li><li><a href="#array-length-array-index">array_length(array_index)</a></li></ul></li><li><a href="#随机数">随机数</a><ul><li><a href="#randomise">randomise()</a></li><li><a href="#irandom-n">irandom(n)</a></li><li><a href="#random-n">random(n)</a></li><li><a href="#irandom-range-n1-n2">irandom_range(n1, n2)</a></li><li><a href="#random-range-n1-n2">random_range(n1, n2)</a></li><li><a href="#choose-val0-val1-val2-max-val">choose(val0, val1, val2... max_val)</a></li><li><a href="#random-get-seed">random_get_seed()</a></li><li><a href="#random-set-seed-val">random_set_seed(val)</a></li><li><a href="#move-random-hsnap-vsnap">move_random(hsnap, vsnap)</a></li></ul></li><li><a href="#三角函数">三角函数</a><ul><li><a href="#degtorad-deg">degtorad(deg)</a></li><li><a href="#radtodeg-rad">radtodeg(rad)</a></li><li><a href="#sin-val">sin(val)</a></li><li><a href="#dsin-val">dsin(val)</a></li><li><a href="#arcsin-x">arcsin(x)</a></li><li><a href="#darcsin-x">darcsin(x)</a></li><li><a href="#cos-val">cos(val)</a></li><li><a href="#dcos-val">dcos(val)</a></li><li><a href="#arccos-x">arccos(x)</a></li><li><a href="#darccos-val">darccos(val)</a></li><li><a href="#tan-val">tan(val)</a></li><li><a href="#dtan-val">dtan(val)</a></li><li><a href="#arctan-x">arctan(x)</a></li><li><a href="#darctan-x">darctan(x)</a></li><li><a href="#arctan2-y-x">arctan2(y, x)</a></li><li><a href="#darctan2-y-x">darctan2(y, x)</a></li></ul></li><li><a href="#矢量">矢量</a><ul><li><a href="#point-direction-x1-y1-x2-y2">point_direction(x1, y1, x2, y2)</a></li><li><a href="#point-distance-x1-y1-x2-y2">point_distance(x1, y1, x2, y2)</a></li><li><a href="#point-distance-3d-x1-y1-z1-x2-y2-z2">point_distance_3d(x1, y1, z1, x2, y2, z2)</a></li><li><a href="#distance-to-object-obj">distance_to_object(obj)</a></li><li><a href="#distance-to-point-x-y">distance_to_point(x, y)</a></li><li><a href="#dot-product-x1-y1-x2-y2">dot_product(x1, y1, x2, y2)</a></li><li><a href="#dot-product-3d-x1-y1-z1-x2-y2-z2">dot_product_3d(x1, y1, z1, x2, y2, z2)</a></li><li><a href="#dot-product-normalised-x1-y1-x2-y2">dot_product_normalised(x1, y1, x2, y2)</a></li><li><a href="#dot-product-3d-normalised-x1-y1-z1-x2-y2-z2">dot_product_3d_normalised(x1, y1, z1, x2, y2, z2)</a></li><li><a href="#angle-difference-dest-src">angle_difference(dest, src)</a></li><li><a href="#lengthdir-x-len-dir">lengthdir_x(len, dir)</a></li><li><a href="#lengthdir-y-len-dir">lengthdir_y(len, dir)</a></li></ul></li><li><a href="#绘制">绘制</a><ul><li><a href="#draw-clear-col">draw_clear(col)</a></li><li><a href="#draw-arrow-x1-y1-x2-y2-size">draw_arrow(x1, y1, x2, y2, size)</a></li><li><a href="#draw-circle-x-y-r-outline">draw_circle(x, y, r, outline)</a></li><li><a href="#draw-circle-colour-x-y-r-col1-col2-outline">draw_circle_colour(x, y, r, col1, col2, outline)</a></li><li><a href="#draw-ellipse-x1-y1-x2-y2-outline">draw_ellipse(x1, y1, x2, y2, outline)</a></li><li><a href="#draw-ellipse-colour-x1-y1-x2-y2-col1-col2-outline">draw_ellipse_colour(x1, y1, x2, y2, col1, col2, outline)</a></li><li><a href="#draw-line-x1-y1-x2-y2">draw_line(x1, y1, x2, y2)</a></li><li><a href="#draw-line-colour-x1-y1-x2-y2-col1-col2">draw_line_colour(x1, y1, x2, y2, col1, col2)</a></li><li><a href="#draw-line-width-x1-y1-x2-y2-w">draw_line_width(x1, y1, x2, y2, w)</a></li></ul></li></ul></nav><h2 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h2><h3 id="array-equals-var1-var2" tabindex="-1">array_equals(var1, var2) <a class="header-anchor" href="#array-equals-var1-var2" aria-label="Permalink to &quot;array_equals(var1, var2)&quot;">​</a></h3><p>用于比较两个数组是否相等的函数。它会检查两个数组的内容是否完全相同，包括数组的长度和每个索引处的值。</p><h3 id="array-resize-array-index-new-size" tabindex="-1">array_resize(array_index, new_size) <a class="header-anchor" href="#array-resize-array-index-new-size" aria-label="Permalink to &quot;array_resize(array_index, new_size)&quot;">​</a></h3><p>通过这个函数，你可以将一个现有的数组尺寸调整到一个新的尺寸。你提供要调整的数组以及数组的新索引数，该函数将调整该数组的大小。</p><h3 id="array-copy-dest-dest-index-src-src-index-length" tabindex="-1">array_copy(dest, dest_index, src, src_index, length) <a class="header-anchor" href="#array-copy-dest-dest-index-src-src-index-length" aria-label="Permalink to &quot;array_copy(dest, dest_index, src, src_index, length)&quot;">​</a></h3><p>通过这个函数，你可以将一个数组的全部或部分复制到另一个数组的任何位置。你需要提供源数组和目的数组（这两个数组必须是以前创建的），以及源数组中要复制的位置和目的数组中要复制的位置。最后，你需要指定要复制的数组的长度（或你想要的部分的长度）。如果被复制的数据超过了目标数组的长度，数组将被扩展以接受这些数据。</p><h3 id="array-pop-array" tabindex="-1">array_pop(array) <a class="header-anchor" href="#array-pop-array" aria-label="Permalink to &quot;array_pop(array)&quot;">​</a></h3><p>这个函数将删除给定数组中的最后一个元素，并返回其值。如果数组为空，则返回undefined。</p><h3 id="array-delete-variable-index-number" tabindex="-1">array_delete(variable, index, number) <a class="header-anchor" href="#array-delete-variable-index-number" aria-label="Permalink to &quot;array_delete(variable, index, number)&quot;">​</a></h3><p>通过这个函数，你可以从一个数组的任何给定位置删除一个（或多个）值。该函数要求你提供一个保存数组的变量，要删除的数组中的索引（位置），以及要删除的值的数量。</p><h3 id="array-set-variable-index-value" tabindex="-1">array_set(variable, index, value) <a class="header-anchor" href="#array-set-variable-index-value" aria-label="Permalink to &quot;array_set(variable, index, value)&quot;">​</a></h3><p>通过这个函数，你可以将一个数组中的一个索引的值设置为一个值。该函数要求你提供一个存放数组的变量，以及要设置的索引和要设置的值。</p><h3 id="array-get-variable-index" tabindex="-1">array_get(variable, index) <a class="header-anchor" href="#array-get-variable-index" aria-label="Permalink to &quot;array_get(variable, index)&quot;">​</a></h3><p>通过这个函数，你可以从一个数组中的一个索引中获取数值。该函数要求你提供一个保存数组的变量和从数组中获取数值的索引。</p><h3 id="array-insert-variable-index-value-value-value-etc" tabindex="-1">array_insert(variable, index, value, [value], [value], [etc...]) <a class="header-anchor" href="#array-insert-variable-index-value-value-value-etc" aria-label="Permalink to &quot;array_insert(variable, index, value, [value], [value], [etc...])&quot;">​</a></h3><p>通过这个函数，你可以在一个数组的任何给定位置插入一个（或多个）值。该函数要求你提供一个存放数组的变量，在数组中要插入的索引（位置），以及至少一个要插入的值，尽管你可以选择提供更多的参数，它们都将从给定的索引开始按顺序插入数组中。</p><h3 id="array-sort-variable-sorttype-or-function" tabindex="-1">array_sort(variable, sorttype_or_function) <a class="header-anchor" href="#array-sort-variable-sorttype-or-function" aria-label="Permalink to &quot;array_sort(variable, sorttype_or_function)&quot;">​</a></h3><p>通过这个函数，你可以按升序或降序对一个数组进行排序，或者使用一个自定义函数来定义排序顺序。该函数要求你提供要排序的数组，然后是以下任何一项。</p><pre><code>常数 true 或 false 表示升序 (true) 或降序 (false) 的排序顺序。
一个自定义函数来定义排序顺序
</code></pre><h3 id="array-create-size-value" tabindex="-1">array_create(size, [value]) <a class="header-anchor" href="#array-create-size-value" aria-label="Permalink to &quot;array_create(size, [value])&quot;">​</a></h3><p>通过这个函数，你可以创建一个指定大小的一维数组。你告诉函数要创建的数组的长度，它将返回数组的 &quot;句柄&quot;，然后你可以把它赋给一个变量。以这种方式创建的数组的每个条目都被初始化为0，除非你指定一个（可选）初始化值。如果你为初始化数组提供了额外的值，那么新数组中的所有索引将被设置为该值而不是0。</p><h3 id="array-length-array-index" tabindex="-1">array_length(array_index) <a class="header-anchor" href="#array-length-array-index" aria-label="Permalink to &quot;array_length(array_index)&quot;">​</a></h3><p>通过这个函数你可以得到一个数组维度的长度。</p><h2 id="随机数" tabindex="-1">随机数 <a class="header-anchor" href="#随机数" aria-label="Permalink to &quot;随机数&quot;">​</a></h2><h3 id="randomise" tabindex="-1">randomise() <a class="header-anchor" href="#randomise" aria-label="Permalink to &quot;randomise()&quot;">​</a></h3><p>这个函数将种子设置为一个随机值。如果你想用真随机进行测试，你应该在游戏开始时调用这个函数。该函数将返回新的随机种子值（一个无符号的32位整数）。</p><h3 id="irandom-n" tabindex="-1">irandom(n) <a class="header-anchor" href="#irandom-n" aria-label="Permalink to &quot;irandom(n)&quot;">​</a></h3><p>它将随机返回一个从0到n的数字（含），只返回整数。</p><h3 id="random-n" tabindex="-1">random(n) <a class="header-anchor" href="#random-n" aria-label="Permalink to &quot;random(n)&quot;">​</a></h3><p>这个函数适用于不需要返回整数的随机数生成。</p><h3 id="irandom-range-n1-n2" tabindex="-1">irandom_range(n1, n2) <a class="header-anchor" href="#irandom-range-n1-n2" aria-label="Permalink to &quot;irandom_range(n1, n2)&quot;">​</a></h3><p>该函数将返回一个在给定范围内（包括）的随机整数值。</p><h3 id="random-range-n1-n2" tabindex="-1">random_range(n1, n2) <a class="header-anchor" href="#random-range-n1-n2" aria-label="Permalink to &quot;random_range(n1, n2)&quot;">​</a></h3><p>这个函数返回一个在指定范围内的随机数，这个返回值不需要是一个整数。</p><h3 id="choose-val0-val1-val2-max-val" tabindex="-1">choose(val0, val1, val2... max_val) <a class="header-anchor" href="#choose-val0-val1-val2-max-val" aria-label="Permalink to &quot;choose(val0, val1, val2... max_val)&quot;">​</a></h3><p>这个函数在给定的所有值中随机选择一个</p><h3 id="random-get-seed" tabindex="-1">random_get_seed() <a class="header-anchor" href="#random-get-seed" aria-label="Permalink to &quot;random_get_seed()&quot;">​</a></h3><p>用于获取当前的随机数种子。</p><h3 id="random-set-seed-val" tabindex="-1">random_set_seed(val) <a class="header-anchor" href="#random-set-seed-val" aria-label="Permalink to &quot;random_set_seed(val)&quot;">​</a></h3><p>用于设置当前随机数种子。</p><h3 id="move-random-hsnap-vsnap" tabindex="-1">move_random(hsnap, vsnap) <a class="header-anchor" href="#move-random-hsnap-vsnap" aria-label="Permalink to &quot;move_random(hsnap, vsnap)&quot;">​</a></h3><p>通过这个函数，你可以将实例设置到room中的任何位置，但是要对准一个 &quot;看不见的&quot;网格。因此，hsnap和vsnap的值为32，将把实例设置为一个随机的位置，该位置与32x32的方格对齐。你可以把这些值设置为1，以获得room中的任何位置。</p><h2 id="三角函数" tabindex="-1">三角函数 <a class="header-anchor" href="#三角函数" aria-label="Permalink to &quot;三角函数&quot;">​</a></h2><h3 id="degtorad-deg" tabindex="-1">degtorad(deg) <a class="header-anchor" href="#degtorad-deg" aria-label="Permalink to &quot;degtorad(deg)&quot;">​</a></h3><p>这个函数使用公式将度数转换为弧度。</p><h3 id="radtodeg-rad" tabindex="-1">radtodeg(rad) <a class="header-anchor" href="#radtodeg-rad" aria-label="Permalink to &quot;radtodeg(rad)&quot;">​</a></h3><p>这个函数用公式将弧度转换为度数。</p><h3 id="sin-val" tabindex="-1">sin(val) <a class="header-anchor" href="#sin-val" aria-label="Permalink to &quot;sin(val)&quot;">​</a></h3><p>这个函数计算val的sin值，取值单位是弧度。</p><h3 id="dsin-val" tabindex="-1">dsin(val) <a class="header-anchor" href="#dsin-val" aria-label="Permalink to &quot;dsin(val)&quot;">​</a></h3><p>这个函数计算val的sin值，取值单位是度。</p><h3 id="arcsin-x" tabindex="-1">arcsin(x) <a class="header-anchor" href="#arcsin-x" aria-label="Permalink to &quot;arcsin(x)&quot;">​</a></h3><p>返回x的反正弦，这只接受-1和1之间的值，返回的数值是弧度。</p><h3 id="darcsin-x" tabindex="-1">darcsin(x) <a class="header-anchor" href="#darcsin-x" aria-label="Permalink to &quot;darcsin(x)&quot;">​</a></h3><p>返回x的反正弦，只接受-1和1之间的数字，函数返回的是度数。</p><h3 id="cos-val" tabindex="-1">cos(val) <a class="header-anchor" href="#cos-val" aria-label="Permalink to &quot;cos(val)&quot;">​</a></h3><p>这个函数计算val的cos值，取值单位是弧度。</p><h3 id="dcos-val" tabindex="-1">dcos(val) <a class="header-anchor" href="#dcos-val" aria-label="Permalink to &quot;dcos(val)&quot;">​</a></h3><p>这个函数计算val的cos值，取值单位是度。</p><h3 id="arccos-x" tabindex="-1">arccos(x) <a class="header-anchor" href="#arccos-x" aria-label="Permalink to &quot;arccos(x)&quot;">​</a></h3><p>返回x的反余弦，只接受-1和1之间的数字，返回的数值是弧度。</p><h3 id="darccos-val" tabindex="-1">darccos(val) <a class="header-anchor" href="#darccos-val" aria-label="Permalink to &quot;darccos(val)&quot;">​</a></h3><p>返回x的反余弦，只接受-1和1之间的数字，返回的是度数。</p><h3 id="tan-val" tabindex="-1">tan(val) <a class="header-anchor" href="#tan-val" aria-label="Permalink to &quot;tan(val)&quot;">​</a></h3><p>这个函数计算val的tan值，取值单位是弧度。</p><h3 id="dtan-val" tabindex="-1">dtan(val) <a class="header-anchor" href="#dtan-val" aria-label="Permalink to &quot;dtan(val)&quot;">​</a></h3><p>这个函数计算val的tan值，取值单位是度。</p><h3 id="arctan-x" tabindex="-1">arctan(x) <a class="header-anchor" href="#arctan-x" aria-label="Permalink to &quot;arctan(x)&quot;">​</a></h3><p>返回x的反切值，接受任何数字，返回的数值是弧度。</p><h3 id="darctan-x" tabindex="-1">darctan(x) <a class="header-anchor" href="#darctan-x" aria-label="Permalink to &quot;darctan(x)&quot;">​</a></h3><p>返回x的反正切值，接受任何数字，返回的是度数。</p><h3 id="arctan2-y-x" tabindex="-1">arctan2(y, x) <a class="header-anchor" href="#arctan2-y-x" aria-label="Permalink to &quot;arctan2(y, x)&quot;">​</a></h3><p>这个函数返回一个角度y/x的反正切，返回的数值是弧度。</p><h3 id="darctan2-y-x" tabindex="-1">darctan2(y, x) <a class="header-anchor" href="#darctan2-y-x" aria-label="Permalink to &quot;darctan2(y, x)&quot;">​</a></h3><p>该函数返回一个角度y/x的反正切，返回的值是度数。</p><h2 id="矢量" tabindex="-1">矢量 <a class="header-anchor" href="#矢量" aria-label="Permalink to &quot;矢量&quot;">​</a></h2><h3 id="point-direction-x1-y1-x2-y2" tabindex="-1">point_direction(x1, y1, x2, y2) <a class="header-anchor" href="#point-direction-x1-y1-x2-y2" aria-label="Permalink to &quot;point_direction(x1, y1, x2, y2)&quot;">​</a></h3><p>这个函数返回由指定分量[x1,y1]和[x2,y2]组成的矢量的方向。</p><h3 id="point-distance-x1-y1-x2-y2" tabindex="-1">point_distance(x1, y1, x2, y2) <a class="header-anchor" href="#point-distance-x1-y1-x2-y2" aria-label="Permalink to &quot;point_distance(x1, y1, x2, y2)&quot;">​</a></h3><p>这个函数返回由指定分量[x1,y1]和[x2,y2]组成的向量的长度。</p><h3 id="point-distance-3d-x1-y1-z1-x2-y2-z2" tabindex="-1">point_distance_3d(x1, y1, z1, x2, y2, z2) <a class="header-anchor" href="#point-distance-3d-x1-y1-z1-x2-y2-z2" aria-label="Permalink to &quot;point_distance_3d(x1, y1, z1, x2, y2, z2)&quot;">​</a></h3><p>这个函数接收提供的矢量分量，并返回矢量的长度（距离）。</p><h3 id="distance-to-object-obj" tabindex="-1">distance_to_object(obj) <a class="header-anchor" href="#distance-to-object-obj" aria-label="Permalink to &quot;distance_to_object(obj)&quot;">​</a></h3><p>这个函数计算从调用实例的边界框的边缘到指定的最近的实例的最近边缘的距离</p><h3 id="distance-to-point-x-y" tabindex="-1">distance_to_point(x, y) <a class="header-anchor" href="#distance-to-point-x-y" aria-label="Permalink to &quot;distance_to_point(x, y)&quot;">​</a></h3><p>这个函数计算从调用实例的边界框的边缘到room中指定的x/y位置的距离</p><h3 id="dot-product-x1-y1-x2-y2" tabindex="-1">dot_product(x1, y1, x2, y2) <a class="header-anchor" href="#dot-product-x1-y1-x2-y2" aria-label="Permalink to &quot;dot_product(x1, y1, x2, y2)&quot;">​</a></h3><p>用于计算两个向量的点积（也称为标量积或内积）。</p><h3 id="dot-product-3d-x1-y1-z1-x2-y2-z2" tabindex="-1">dot_product_3d(x1, y1, z1, x2, y2, z2) <a class="header-anchor" href="#dot-product-3d-x1-y1-z1-x2-y2-z2" aria-label="Permalink to &quot;dot_product_3d(x1, y1, z1, x2, y2, z2)&quot;">​</a></h3><p>用于计算两个三维向量的点积（也称为标量积或内积）。</p><h3 id="dot-product-normalised-x1-y1-x2-y2" tabindex="-1">dot_product_normalised(x1, y1, x2, y2) <a class="header-anchor" href="#dot-product-normalised-x1-y1-x2-y2" aria-label="Permalink to &quot;dot_product_normalised(x1, y1, x2, y2)&quot;">​</a></h3><p>用于计算两个向量的归一化点积。</p><h3 id="dot-product-3d-normalised-x1-y1-z1-x2-y2-z2" tabindex="-1">dot_product_3d_normalised(x1, y1, z1, x2, y2, z2) <a class="header-anchor" href="#dot-product-3d-normalised-x1-y1-z1-x2-y2-z2" aria-label="Permalink to &quot;dot_product_3d_normalised(x1, y1, z1, x2, y2, z2)&quot;">​</a></h3><p>用于计算两个三维向量的归一化点积。</p><h3 id="angle-difference-dest-src" tabindex="-1">angle_difference(dest, src) <a class="header-anchor" href="#angle-difference-dest-src" aria-label="Permalink to &quot;angle_difference(dest, src)&quot;">​</a></h3><p>用于计算两个角度之间的差异。</p><h3 id="lengthdir-x-len-dir" tabindex="-1">lengthdir_x(len, dir) <a class="header-anchor" href="#lengthdir-x-len-dir" aria-label="Permalink to &quot;lengthdir_x(len, dir)&quot;">​</a></h3><p>这个函数用来获取从起点到方向为 &quot;dir&quot; 的位置 &quot;len&quot; 像素的x分量。</p><h3 id="lengthdir-y-len-dir" tabindex="-1">lengthdir_y(len, dir) <a class="header-anchor" href="#lengthdir-y-len-dir" aria-label="Permalink to &quot;lengthdir_y(len, dir)&quot;">​</a></h3><p>这个函数用来获取从起点到方向为 &quot;dir&quot; 的位置 &quot;len&quot; 像素的y分量。</p><h2 id="绘制" tabindex="-1">绘制 <a class="header-anchor" href="#绘制" aria-label="Permalink to &quot;绘制&quot;">​</a></h2><h3 id="draw-clear-col" tabindex="-1">draw_clear(col) <a class="header-anchor" href="#draw-clear-col" aria-label="Permalink to &quot;draw_clear(col)&quot;">​</a></h3><p>这个函数可以用来清除整个屏幕（没有阿尔法混合）中给定的颜色，并且只在一个实例的绘制事件中使用（如果在任何其他事件中使用，它将不会显示）。它也可以用于在新创建的表面时清除它们。</p><h3 id="draw-arrow-x1-y1-x2-y2-size" tabindex="-1">draw_arrow(x1, y1, x2, y2, size) <a class="header-anchor" href="#draw-arrow-x1-y1-x2-y2-size" aria-label="Permalink to &quot;draw_arrow(x1, y1, x2, y2, size)&quot;">​</a></h3><p>这个函数将从点（x1,y1）到点（x2,y2）画一个箭头。箭头的茎是沿着这些点画的，实际的箭头是在末端画的，其中箭头的大小由参数 &quot;size&quot; 定义，并且 被计算为箭杆的一部分，因此端点总是与x2,y2定义的位置对齐。箭头的宽度是按照长度的比例自动计算的。</p><h3 id="draw-circle-x-y-r-outline" tabindex="-1">draw_circle(x, y, r, outline) <a class="header-anchor" href="#draw-circle-x-y-r-outline" aria-label="Permalink to &quot;draw_circle(x, y, r, outline)&quot;">​</a></h3><p>通过这个函数，你可以画出一个圆的轮廓或一个填充圆。</p><h3 id="draw-circle-colour-x-y-r-col1-col2-outline" tabindex="-1">draw_circle_colour(x, y, r, col1, col2, outline) <a class="header-anchor" href="#draw-circle-colour-x-y-r-col1-col2-outline" aria-label="Permalink to &quot;draw_circle_colour(x, y, r, col1, col2, outline)&quot;">​</a></h3><p>通过这个函数，你可以画一个圆的轮廓或一个填充的圆，如果是填充的，你可以定义内部和外部的填充颜色。如果这些颜色不一样，你会得到一个从一个到另一个的渐变效果。</p><h3 id="draw-ellipse-x1-y1-x2-y2-outline" tabindex="-1">draw_ellipse(x1, y1, x2, y2, outline) <a class="header-anchor" href="#draw-ellipse-x1-y1-x2-y2-outline" aria-label="Permalink to &quot;draw_ellipse(x1, y1, x2, y2, outline)&quot;">​</a></h3><p>使用这个函数，你可以通过定义一个矩形区域来绘制一个椭圆的轮廓或一个填充的椭圆。</p><h3 id="draw-ellipse-colour-x1-y1-x2-y2-col1-col2-outline" tabindex="-1">draw_ellipse_colour(x1, y1, x2, y2, col1, col2, outline) <a class="header-anchor" href="#draw-ellipse-colour-x1-y1-x2-y2-col1-col2-outline" aria-label="Permalink to &quot;draw_ellipse_colour(x1, y1, x2, y2, col1, col2, outline)&quot;">​</a></h3><p>通过这个函数，你可以画出一个椭圆的轮廓，或者通过定义一个矩形区域来画出一个填充的椭圆，然后将椭圆创建为适合的矩形区域。如果它是填充的，你可以定义内部和外部的填充颜色。如果这些颜色不一样，你会得到一个从一个到另一个的渐变效果。</p><h3 id="draw-line-x1-y1-x2-y2" tabindex="-1">draw_line(x1, y1, x2, y2) <a class="header-anchor" href="#draw-line-x1-y1-x2-y2" aria-label="Permalink to &quot;draw_line(x1, y1, x2, y2)&quot;">​</a></h3><p>通过这个函数，你可以在游戏中的任何两点之间画一条1像素宽的线。</p><h3 id="draw-line-colour-x1-y1-x2-y2-col1-col2" tabindex="-1">draw_line_colour(x1, y1, x2, y2, col1, col2) <a class="header-anchor" href="#draw-line-colour-x1-y1-x2-y2-col1-col2" aria-label="Permalink to &quot;draw_line_colour(x1, y1, x2, y2, col1, col2)&quot;">​</a></h3><p>用这个功能你可以画一条1像素宽的线，颜色在第一点的颜色1和第二点的颜色2之间混合。</p><h3 id="draw-line-width-x1-y1-x2-y2-w" tabindex="-1">draw_line_width(x1, y1, x2, y2, w) <a class="header-anchor" href="#draw-line-width-x1-y1-x2-y2-w" aria-label="Permalink to &quot;draw_line_width(x1, y1, x2, y2, w)&quot;">​</a></h3><p>通过这个函数，你可以在游戏中的任何两点之间画一条指定宽度的线。</p>`,124)]))}const u=e(o,[["render",n]]);export{y as __pageData,u as default};
